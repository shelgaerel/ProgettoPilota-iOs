// This file has been autogenerated from parsing an Objective-C header file added in Xcode.

using System;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using CoreLibrary;
using System.Collections;
using System.Reflection;
using System.Collections.Generic;
using CoreFactory;
using DataEntity;
using DataEntityManager;

namespace ProgettoPilotaiOsStoryBoard
{
	public partial class AreeViewController : UITableViewController, UIInterface
	{
		public AreeViewController (IntPtr handle) : base (handle)
		{
			CreateDataEntityManager ();
			DataEntityManager.Read ();
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			this.txtCodice.ShouldReturn += (textField) => { 
				textField.ResignFirstResponder();
				return true; 
			};

			this.txtDescrizione.ShouldReturn += delegate(UITextField textField) {
				textField.ResignFirstResponder ();
				return true;
			};


		}

		partial void Save (NSObject sender)
		{
			GetDataEntityFromControls();

			DataEntityManager.UpdateEntity();

			NavigationController.PopViewControllerAnimated(true);
		}

		partial void Delete (NSObject sender)
		{
			GetDataEntityFromControls();
			Entity.State = DataEntityState.Deleted;
			DataEntityManager.UpdateEntity();

			NavigationController.PopViewControllerAnimated(true);
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			this.txtCodice.Text = Entity.CodArea;
			this.txtDescrizione.Text = Entity.Descrizione;
		}

		#region IManagerInterface implementation

		public void LoadDataEntity(object pkValue)
		{
			this.DataEntityManager.Read<AreeDataEntity> (pkValue);
		}

		public AbstractDataEntityManager CreateDataEntityManager ()
		{
			return DataEntityManagerFactory.GetDataEntityManager (MenuItems.Aree);
		}

		public void GetDataEntityFromControls ()
		{
			Entity.CodArea = this.txtCodice.Text;
			Entity.Descrizione = this.txtDescrizione.Text;
		}

		#endregion

		private AbstractDataEntityManager mDataEntityManager;
		public AbstractDataEntityManager DataEntityManager {
			get {
				if (mDataEntityManager == null) 
				{
					mDataEntityManager = DataEntityManagerFactory.GetDataEntityManager (MenuItems.Aree);
					return mDataEntityManager as AreeDataEntityManager;
				}
				else
					return mDataEntityManager as AreeDataEntityManager;
			}
			set {
				mDataEntityManager = value;
			}
		}

		public AreeDataEntity Entity {
			get {
				if (DataEntityManager.DataEntity == null) {
					DataEntityManager.Read ();
				}
				return DataEntityManager.DataEntity as AreeDataEntity;
			}
			set {
				DataEntityManager.DataEntity = value;
			}
		}
	}
}
